Linear Discriminant Analysis performs very good on multiclass but also all the dependent variable should be continuous
import pandas as pd
df = pd.read_csv('C:\Users\s0s01rl\Desktop\Shutterfly\CompleteData_1.csv')
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
X = df.iloc[:, 1:].values  
y = df.iloc[:, 0].values  
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=0)
from sklearn.preprocessing import StandardScaler

sc = StandardScaler()  
X_train = sc.fit_transform(X_train)  
X_test = sc.transform(X_test) 

lda = LDA(n_components=3)  
X_train = lda.fit_transform(X_train, y_train)  
X_test = lda.transform(X_test)
from sklearn.ensemble import RandomForestClassifier
#------------Random FOrest depth 3 - 0.83
classifier = RandomForestClassifier(max_depth=3, random_state=0)

classifier.fit(X_train, y_train)  
y_pred = classifier.predict(X_test) 
from sklearn.metrics import confusion_matrix  
from sklearn.metrics import accuracy_score

cm = confusion_matrix(y_test, y_pred)  
print(cm)  
print('Accuracy' + str(accuracy_score(y_test, y_pred)))  
#------------------Logistic Regression - 0.82
from sklearn.linear_model import LogisticRegression
logisticRegr = LogisticRegression(solver = 'lbfgs')
result=logisticRegr.fit(X_train, y_train)
logisticRegr.score(X_test, y_test)
# -------------------SVM - 0.82
from sklearn.svm import LinearSVC
svm=LinearSVC(C=1.0,penalty='l1',max_iter=3000,dual=False)
clf = svm.fit(X_train, y_train)
clf.score(X_test, y_test)
