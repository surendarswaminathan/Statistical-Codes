PCA is unsupervised learning on independent variables . Need to understand if categorical variables should be included in the PCA.
Always Standardize the variable woth mean 1 and variance 0
import pandas as pd
df = pd.read_csv('C:\Users\s0s01rl\Desktop\Shutterfly\CompleteData_1.csv')
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
X = df.iloc[:, 1:].values  
y = df.iloc[:, 0].values  
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=0)
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
x=StandardScaler().fit_transform(X)
pca=PCA(n_components=5)
principalComponents=pca.fit_transform(x)
principalDF=pd.DataFrame(data=principalComponents,columns=['principal Component 1','principal Component 2',
                                                           'principal Component 3','principal Component 4',
                                                           'principal Component 5' ])
finalDf = pd.concat([principalDF, df[['target']]], axis = 1)
pca.explained_variance_ratio_

scaler=StandardScaler()
scaler.fit(X_train)
train_data=scaler.transform(X_train)
test_data=scaler.transform(X_test)
pca1=PCA(n_components=2)
pca1.fit(train_data)
train_data1 = pca1.fit_transform(train_data)
test_data1  = pca1.fit_transform(test_data)
# Logistic Regression on PCA -0.79
from sklearn.linear_model import LogisticRegression
logisticRegr = LogisticRegression(solver = 'lbfgs')
result=logisticRegr.fit(train_data1, y_train)
logisticRegr.score(test_data1, y_test)
#-----------------SVM on PCA - 0.80
from sklearn.svm import LinearSVC
svm=LinearSVC(C=1.0,penalty='l1',max_iter=3000,dual=False)
clf = svm.fit(train_data1, y_train)
clf.score(test_data1, y_test)
#------------Random FOrest # 0.84
classifier = RandomForestClassifier(max_depth=2, random_state=0)

classifier.fit(X_train, y_train)  
y_pred = classifier.predict(X_test) 
from sklearn.metrics import confusion_matrix  
from sklearn.metrics import accuracy_score

cm = confusion_matrix(y_test, y_pred)  
print(cm)  
print('Accuracy' + str(accuracy_score(y_test, y_pred)))  
